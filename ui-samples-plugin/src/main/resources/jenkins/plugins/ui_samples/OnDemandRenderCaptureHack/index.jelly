<!--
The MIT License

Copyright (c) 2004-2010, Oracle Corporation

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:s="/lib/samples">
  <s:sample title="Hack">
    <!-- mimic the environment of the typical configuration screen -->
    <j:set var="instance" value="${it}" />
    <j:set var="descriptor" value="${instance.descriptor}" />
    <f:form method="post" action="bogus" name="config">

      <!-- the purpose of this hack is to expose this variable to the fragments lazily loaded by Fruit/config.jelly -->
      <j:set var="capture1" value="${it.capture1}"/>
      <div>capture1=${capture1}</div>

      <f:entry title="${%Fruits}" capture1="${capture1}">
        <f:repeatableHeteroProperty field="fruits" capture="capture1">
          <!--
            repeatableHeteroProperty doesn't take a closure, but here we pass one. This is what gets invoked by <d:invokeBody/> from Fruit/config.jelly
            <f:invokeBody> doesn't create a child context, so we just need to use the regular <j:set>.

            The real trick is "${attrs.capture1?:capture1}" part. When called from lazy rendering, the "attrs" variable
            refers to the attributes of <f:entry> tag (this is probably a bug.) So "attrs.capture1" finds the @capture1
            that we set in <f:entry> above. This is harmless to <f:entry> because it's an unknown attribute to it.

            When config.jelly is rendered for already configured instances, 'attrs' resolves to nothing, because
            there's no lexically scoped 'attrs' in here. So in tht case we fall back to 'capture1', which
            finds <j:set var="capture1" value="${it.capture1}"/> we do above.

            Finally, we set @capture to <f:repeatableHeteroProperty> so that if we run with the newer version of Jenkins (>=1.494)
            that supports this attribute, it'll correctly capture this variable. In this way, even if "attrs.capture1"
            bug gets fixed, we'll still find the right value of "capture1"
          -->
          <j:set var="capture1" value="${attrs.capture1?:capture1}"/>
        </f:repeatableHeteroProperty>
      </f:entry>
    </f:form>
  </s:sample>
</j:jelly>
